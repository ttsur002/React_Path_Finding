{"ast":null,"code":"import React, { Component } from 'react';\n\nclass Search {\n  constructor(grid, col, row) {\n    this.grid = grid;\n    this.col = col;\n    this.row = row;\n  }\n\n  breadth_first_search() {\n    let nodes = document.getElementsByClassName(\"node\");\n\n    for (let i = 0; i < nodes.length; i++) {\n      let reset_raw = nodes[i].getAttribute(\"rawid\");\n      let reset_col = nodes[i].getAttribute(\"nodeid\");\n      this.grid[reset_raw][reset_col].isVisited = false;\n\n      if (nodes[i].hasAttribute(\"isvisited\")) {\n        nodes[i].removeAttribute(\"isvisited\");\n      }\n    }\n\n    let queue = [];\n    let row = document.getElementById(\"start\").getAttribute(\"rawid\");\n    let col = document.getElementById(\"start\").getAttribute(\"nodeid\");\n    queue.push(this.grid[row][col]);\n\n    while (queue.length !== 0) {\n      let current_node = queue.shift();\n      let current = current_node.col + \" \" + current_node.row;\n      current_node.isVisited = true;\n      document.getElementsByName(current)[0].setAttribute(\"isVisited\", true);\n      let neighbors = current_node.searchNeighbors();\n\n      for (let i = 0; i < neighbors.length; i++) {\n        if (current_node.isFinish) {\n          alert(\"Found\");\n          return;\n        }\n\n        queue.push(neighbors[i]);\n      }\n    }\n  }\n\n}\n\nexport default Search;","map":{"version":3,"sources":["/Users/takehirotsurumi/WebstormProjects/streamlit/src/Search.js"],"names":["React","Component","Search","constructor","grid","col","row","breadth_first_search","nodes","document","getElementsByClassName","i","length","reset_raw","getAttribute","reset_col","isVisited","hasAttribute","removeAttribute","queue","getElementById","push","current_node","shift","current","getElementsByName","setAttribute","neighbors","searchNeighbors","isFinish","alert"],"mappings":"AAAA,OAAOA,KAAP,IAAeC,SAAf,QAA+B,OAA/B;;AAGA,MAAMC,MAAN,CAAa;AACTC,EAAAA,WAAW,CAACC,IAAD,EAAMC,GAAN,EAAUC,GAAV,EAAe;AACtB,SAAKF,IAAL,GAAUA,IAAV;AACA,SAAKC,GAAL,GAASA,GAAT;AACA,SAAKC,GAAL,GAASA,GAAT;AACH;;AACDC,EAAAA,oBAAoB,GAAE;AAClB,QAAIC,KAAK,GAACC,QAAQ,CAACC,sBAAT,CAAgC,MAAhC,CAAV;;AACA,SAAK,IAAIC,CAAC,GAAC,CAAX,EAAaA,CAAC,GAACH,KAAK,CAACI,MAArB,EAA4BD,CAAC,EAA7B,EAAgC;AAC5B,UAAIE,SAAS,GAACL,KAAK,CAACG,CAAD,CAAL,CAASG,YAAT,CAAsB,OAAtB,CAAd;AACA,UAAIC,SAAS,GAACP,KAAK,CAACG,CAAD,CAAL,CAASG,YAAT,CAAsB,QAAtB,CAAd;AACA,WAAKV,IAAL,CAAUS,SAAV,EAAqBE,SAArB,EAAgCC,SAAhC,GAA0C,KAA1C;;AACA,UAAGR,KAAK,CAACG,CAAD,CAAL,CAASM,YAAT,CAAsB,WAAtB,CAAH,EAAsC;AAClCT,QAAAA,KAAK,CAACG,CAAD,CAAL,CAASO,eAAT,CAAyB,WAAzB;AACH;AACJ;;AACD,QAAIC,KAAK,GAAC,EAAV;AACA,QAAIb,GAAG,GAACG,QAAQ,CAACW,cAAT,CAAwB,OAAxB,EAAiCN,YAAjC,CAA8C,OAA9C,CAAR;AACA,QAAIT,GAAG,GAACI,QAAQ,CAACW,cAAT,CAAwB,OAAxB,EAAiCN,YAAjC,CAA8C,QAA9C,CAAR;AACAK,IAAAA,KAAK,CAACE,IAAN,CAAW,KAAKjB,IAAL,CAAUE,GAAV,EAAeD,GAAf,CAAX;;AACA,WAAMc,KAAK,CAACP,MAAN,KAAe,CAArB,EAAuB;AACnB,UAAIU,YAAY,GAACH,KAAK,CAACI,KAAN,EAAjB;AACA,UAAIC,OAAO,GAACF,YAAY,CAACjB,GAAb,GAAiB,GAAjB,GAAqBiB,YAAY,CAAChB,GAA9C;AACAgB,MAAAA,YAAY,CAACN,SAAb,GAAuB,IAAvB;AACAP,MAAAA,QAAQ,CAACgB,iBAAT,CAA2BD,OAA3B,EAAoC,CAApC,EAAuCE,YAAvC,CAAoD,WAApD,EAAgE,IAAhE;AACA,UAAIC,SAAS,GAACL,YAAY,CAACM,eAAb,EAAd;;AACA,WAAI,IAAIjB,CAAC,GAAC,CAAV,EAAYA,CAAC,GAACgB,SAAS,CAACf,MAAxB,EAA+BD,CAAC,EAAhC,EAAoC;AAChC,YAAIW,YAAY,CAACO,QAAjB,EAA2B;AACvBC,UAAAA,KAAK,CAAC,OAAD,CAAL;AACA;AACH;;AACDX,QAAAA,KAAK,CAACE,IAAN,CAAWM,SAAS,CAAChB,CAAD,CAApB;AACH;AACR;AACA;;AAlCQ;;AAqCb,eAAeT,MAAf","sourcesContent":["import React, {Component} from 'react';\n\n\nclass Search {\n    constructor(grid,col,row) {\n        this.grid=grid;\n        this.col=col;\n        this.row=row;\n    }\n    breadth_first_search(){\n        let nodes=document.getElementsByClassName(\"node\")\n        for (let i=0;i<nodes.length;i++){\n            let reset_raw=nodes[i].getAttribute(\"rawid\")\n            let reset_col=nodes[i].getAttribute(\"nodeid\")\n            this.grid[reset_raw][reset_col].isVisited=false;\n            if(nodes[i].hasAttribute(\"isvisited\")){\n                nodes[i].removeAttribute(\"isvisited\")\n            }\n        }\n        let queue=[]\n        let row=document.getElementById(\"start\").getAttribute(\"rawid\")\n        let col=document.getElementById(\"start\").getAttribute(\"nodeid\")\n        queue.push(this.grid[row][col]);\n        while(queue.length!==0){\n            let current_node=queue.shift();\n            let current=current_node.col+\" \"+current_node.row;\n            current_node.isVisited=true;\n            document.getElementsByName(current)[0].setAttribute(\"isVisited\",true)\n            let neighbors=current_node.searchNeighbors();\n            for(let i=0;i<neighbors.length;i++) {\n                if (current_node.isFinish) {\n                    alert(\"Found\")\n                    return\n                }\n                queue.push(neighbors[i])\n            }\n    }\n    }\n}\n\nexport default Search;"]},"metadata":{},"sourceType":"module"}