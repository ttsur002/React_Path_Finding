{"ast":null,"code":"import React, { Component } from 'react';\n\nclass Search {\n  constructor(grid) {\n    this.grid = grid;\n  }\n\n  breadth_first_search() {\n    let row = 8;\n    let col = 0;\n    let queue = [];\n    let Visited = [];\n    queue.push(this.grid[col][row]);\n\n    while (0 !== queue.length) {\n      let neighbors = queue[0].searchNeighbors();\n\n      if (neighbors[0].isFinish) {\n        return;\n      }\n\n      queue[0].isVisited = true;\n      Visited.push(queue.shift());\n\n      for (let i = 0; i < neighbors.length; i++) {\n        queue.push(neighbors[i]);\n      }\n    }\n  }\n\n}\n\nexport default Search;","map":{"version":3,"sources":["/Users/takehirotsurumi/WebstormProjects/streamlit/src/Search.js"],"names":["React","Component","Search","constructor","grid","breadth_first_search","row","col","queue","Visited","push","length","neighbors","searchNeighbors","isFinish","isVisited","shift","i"],"mappings":"AAAA,OAAOA,KAAP,IAAeC,SAAf,QAA+B,OAA/B;;AAGA,MAAMC,MAAN,CAAa;AACTC,EAAAA,WAAW,CAACC,IAAD,EAAO;AACd,SAAKA,IAAL,GAAUA,IAAV;AACH;;AACDC,EAAAA,oBAAoB,GAAE;AACtB,QAAIC,GAAG,GAAC,CAAR;AACA,QAAIC,GAAG,GAAC,CAAR;AACA,QAAIC,KAAK,GAAC,EAAV;AACA,QAAIC,OAAO,GAAC,EAAZ;AACAD,IAAAA,KAAK,CAACE,IAAN,CAAW,KAAKN,IAAL,CAAUG,GAAV,EAAeD,GAAf,CAAX;;AACA,WAAM,MAAME,KAAK,CAACG,MAAlB,EAAyB;AACrB,UAAIC,SAAS,GAACJ,KAAK,CAAC,CAAD,CAAL,CAASK,eAAT,EAAd;;AACA,UAAGD,SAAS,CAAC,CAAD,CAAT,CAAaE,QAAhB,EAAyB;AACrB;AACH;;AACDN,MAAAA,KAAK,CAAC,CAAD,CAAL,CAASO,SAAT,GAAmB,IAAnB;AACAN,MAAAA,OAAO,CAACC,IAAR,CAAaF,KAAK,CAACQ,KAAN,EAAb;;AACA,WAAI,IAAIC,CAAC,GAAC,CAAV,EAAYA,CAAC,GAACL,SAAS,CAACD,MAAxB,EAA+BM,CAAC,EAAhC,EAAmC;AAC/BT,QAAAA,KAAK,CAACE,IAAN,CAAWE,SAAS,CAACK,CAAD,CAApB;AACH;AAEJ;AACA;;AAtBQ;;AAyBb,eAAef,MAAf","sourcesContent":["import React, {Component} from 'react';\n\n\nclass Search {\n    constructor(grid) {\n        this.grid=grid;\n    }\n    breadth_first_search(){\n    let row=8;\n    let col=0;\n    let queue=[];\n    let Visited=[];\n    queue.push(this.grid[col][row])\n    while(0 !== queue.length){\n        let neighbors=queue[0].searchNeighbors();\n        if(neighbors[0].isFinish){\n            return\n        }\n        queue[0].isVisited=true\n        Visited.push(queue.shift())\n        for(let i=0;i<neighbors.length;i++){\n            queue.push(neighbors[i])\n        }\n\n    }\n    }\n}\n\nexport default Search;"]},"metadata":{},"sourceType":"module"}