{"ast":null,"code":"import React, { Component } from 'react';\n\nclass Search {\n  constructor(grid, col, row) {\n    this.grid = grid;\n    this.col = col;\n    this.row = row;\n  }\n\n  breadth_first_search() {\n    let row = 8;\n    let col = 0;\n    let queue = [];\n    queue.push(this.grid[col][row]);\n\n    while (!queue.isEmpty) {\n      let neighbors = queue[0].searchNeighbors();\n\n      if (neighbors[0].isFinish) {\n        alert(\"found\");\n        return;\n      }\n\n      for (let i = 0; i < neighbors.length; i++) {\n        queue.push(neighbors[i]);\n      }\n\n      console.log(neighbors);\n      queue.shift();\n    }\n  }\n\n}\n\nexport default Search;","map":{"version":3,"sources":["/Users/takehirotsurumi/WebstormProjects/streamlit/src/Search.js"],"names":["React","Component","Search","constructor","grid","col","row","breadth_first_search","queue","push","isEmpty","neighbors","searchNeighbors","isFinish","alert","i","length","console","log","shift"],"mappings":"AAAA,OAAOA,KAAP,IAAeC,SAAf,QAA+B,OAA/B;;AAGA,MAAMC,MAAN,CAAa;AACTC,EAAAA,WAAW,CAACC,IAAD,EAAMC,GAAN,EAAUC,GAAV,EAAe;AACtB,SAAKF,IAAL,GAAUA,IAAV;AACA,SAAKC,GAAL,GAASA,GAAT;AACA,SAAKC,GAAL,GAASA,GAAT;AACH;;AACDC,EAAAA,oBAAoB,GAAE;AACtB,QAAID,GAAG,GAAC,CAAR;AACA,QAAID,GAAG,GAAC,CAAR;AACA,QAAIG,KAAK,GAAC,EAAV;AACAA,IAAAA,KAAK,CAACC,IAAN,CAAW,KAAKL,IAAL,CAAUC,GAAV,EAAeC,GAAf,CAAX;;AACA,WAAM,CAACE,KAAK,CAACE,OAAb,EAAsB;AAClB,UAAIC,SAAS,GAACH,KAAK,CAAC,CAAD,CAAL,CAASI,eAAT,EAAd;;AACA,UAAID,SAAS,CAAC,CAAD,CAAT,CAAaE,QAAjB,EAA2B;AACvBC,QAAAA,KAAK,CAAC,OAAD,CAAL;AACA;AACH;;AACD,WAAI,IAAIC,CAAC,GAAC,CAAV,EAAYA,CAAC,GAACJ,SAAS,CAACK,MAAxB,EAA+BD,CAAC,EAAhC,EAAmC;AAC/BP,QAAAA,KAAK,CAACC,IAAN,CAAWE,SAAS,CAACI,CAAD,CAApB;AACH;;AACDE,MAAAA,OAAO,CAACC,GAAR,CAAYP,SAAZ;AACAH,MAAAA,KAAK,CAACW,KAAN;AACC;AACJ;;AAvBQ;;AA0Bb,eAAejB,MAAf","sourcesContent":["import React, {Component} from 'react';\n\n\nclass Search {\n    constructor(grid,col,row) {\n        this.grid=grid;\n        this.col=col;\n        this.row=row;\n    }\n    breadth_first_search(){\n    let row=8;\n    let col=0;\n    let queue=[];\n    queue.push(this.grid[col][row])\n    while(!queue.isEmpty) {\n        let neighbors=queue[0].searchNeighbors();\n        if (neighbors[0].isFinish) {\n            alert(\"found\")\n            return\n        }\n        for(let i=0;i<neighbors.length;i++){\n            queue.push(neighbors[i])\n        }\n        console.log(neighbors)\n        queue.shift()\n        }\n    }\n}\n\nexport default Search;"]},"metadata":{},"sourceType":"module"}