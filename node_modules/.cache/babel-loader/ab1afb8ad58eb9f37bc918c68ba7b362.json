{"ast":null,"code":"import React, { Component } from 'react';\n\nclass Search {\n  constructor(grid, col, row) {\n    this.grid = grid;\n    this.col = col;\n    this.row = row;\n    this.queue = grid[0][7];\n  }\n\n  breadth_first_search() {\n    let current_node = this.queue.shift();\n    console.log(this.grid[0][7]);\n    let neighbors = current_node.searchNeighbors();\n    console.log(neighbors);\n\n    for (let i = 0; i < neighbors.length; i++) {\n      if (current_node.isFinish) {\n        alert(\"Found\");\n        return;\n      }\n\n      this.queue.push(neighbors[i]);\n    }\n  }\n\n}\n\nexport default Search;","map":{"version":3,"sources":["/Users/takehirotsurumi/WebstormProjects/streamlit/src/Search.js"],"names":["React","Component","Search","constructor","grid","col","row","queue","breadth_first_search","current_node","shift","console","log","neighbors","searchNeighbors","i","length","isFinish","alert","push"],"mappings":"AAAA,OAAOA,KAAP,IAAeC,SAAf,QAA+B,OAA/B;;AAGA,MAAMC,MAAN,CAAa;AACTC,EAAAA,WAAW,CAACC,IAAD,EAAMC,GAAN,EAAUC,GAAV,EAAe;AACtB,SAAKF,IAAL,GAAUA,IAAV;AACA,SAAKC,GAAL,GAASA,GAAT;AACA,SAAKC,GAAL,GAASA,GAAT;AACA,SAAKC,KAAL,GAAWH,IAAI,CAAC,CAAD,CAAJ,CAAQ,CAAR,CAAX;AACH;;AACDI,EAAAA,oBAAoB,GAAE;AACtB,QAAIC,YAAY,GAAC,KAAKF,KAAL,CAAWG,KAAX,EAAjB;AACAC,IAAAA,OAAO,CAACC,GAAR,CAAY,KAAKR,IAAL,CAAU,CAAV,EAAa,CAAb,CAAZ;AACA,QAAIS,SAAS,GAACJ,YAAY,CAACK,eAAb,EAAd;AACAH,IAAAA,OAAO,CAACC,GAAR,CAAYC,SAAZ;;AACA,SAAI,IAAIE,CAAC,GAAC,CAAV,EAAYA,CAAC,GAACF,SAAS,CAACG,MAAxB,EAA+BD,CAAC,EAAhC,EAAmC;AAC/B,UAAGN,YAAY,CAACQ,QAAhB,EAAyB;AACrBC,QAAAA,KAAK,CAAC,OAAD,CAAL;AACA;AACH;;AACD,WAAKX,KAAL,CAAWY,IAAX,CAAgBN,SAAS,CAACE,CAAD,CAAzB;AACH;AACA;;AAnBQ;;AAsBb,eAAeb,MAAf","sourcesContent":["import React, {Component} from 'react';\n\n\nclass Search {\n    constructor(grid,col,row) {\n        this.grid=grid;\n        this.col=col;\n        this.row=row;\n        this.queue=grid[0][7]\n    }\n    breadth_first_search(){\n    let current_node=this.queue.shift();\n    console.log(this.grid[0][7]);\n    let neighbors=current_node.searchNeighbors();\n    console.log(neighbors);\n    for(let i=0;i<neighbors.length;i++){\n        if(current_node.isFinish){\n            alert(\"Found\")\n            return\n        }\n        this.queue.push(neighbors[i])\n    }\n    }\n}\n\nexport default Search;"]},"metadata":{},"sourceType":"module"}