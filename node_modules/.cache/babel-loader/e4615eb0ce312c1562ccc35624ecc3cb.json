{"ast":null,"code":"import React, { Component } from 'react';\n\nclass Search {\n  constructor(grid, col, row) {\n    this.grid = grid;\n    this.col = col;\n    this.row = row;\n  }\n\n  breadth_first_search() {\n    let row = 8;\n    let col = 0;\n    let queue = [];\n    queue.push(this.grid[col][row]);\n    let current_node = queue.shift();\n    console.log(current_node);\n    let neighbors = current_node.searchNeighbors();\n    console.log(neighbors);\n\n    for (let i = 0; i < neighbors.length; i++) {\n      if (current_node.isFinish) {\n        alert(\"Found\");\n        return;\n      }\n\n      queue.push(neighbors[i]);\n    }\n  }\n\n}\n\nexport default Search;","map":{"version":3,"sources":["/Users/takehirotsurumi/WebstormProjects/streamlit/src/Search.js"],"names":["React","Component","Search","constructor","grid","col","row","breadth_first_search","queue","push","current_node","shift","console","log","neighbors","searchNeighbors","i","length","isFinish","alert"],"mappings":"AAAA,OAAOA,KAAP,IAAeC,SAAf,QAA+B,OAA/B;;AAGA,MAAMC,MAAN,CAAa;AACTC,EAAAA,WAAW,CAACC,IAAD,EAAMC,GAAN,EAAUC,GAAV,EAAe;AACtB,SAAKF,IAAL,GAAUA,IAAV;AACA,SAAKC,GAAL,GAASA,GAAT;AACA,SAAKC,GAAL,GAASA,GAAT;AACH;;AACDC,EAAAA,oBAAoB,GAAE;AACtB,QAAID,GAAG,GAAC,CAAR;AACA,QAAID,GAAG,GAAC,CAAR;AACA,QAAIG,KAAK,GAAC,EAAV;AACAA,IAAAA,KAAK,CAACC,IAAN,CAAW,KAAKL,IAAL,CAAUC,GAAV,EAAeC,GAAf,CAAX;AACI,QAAII,YAAY,GAACF,KAAK,CAACG,KAAN,EAAjB;AACJC,IAAAA,OAAO,CAACC,GAAR,CAAYH,YAAZ;AACI,QAAII,SAAS,GAACJ,YAAY,CAACK,eAAb,EAAd;AACJH,IAAAA,OAAO,CAACC,GAAR,CAAYC,SAAZ;;AACI,SAAI,IAAIE,CAAC,GAAC,CAAV,EAAYA,CAAC,GAACF,SAAS,CAACG,MAAxB,EAA+BD,CAAC,EAAhC,EAAmC;AAC/B,UAAGN,YAAY,CAACQ,QAAhB,EAAyB;AACrBC,QAAAA,KAAK,CAAC,OAAD,CAAL;AACA;AACH;;AACDX,MAAAA,KAAK,CAACC,IAAN,CAAWK,SAAS,CAACE,CAAD,CAApB;AAEH;AACJ;;AAvBQ;;AA0Bb,eAAed,MAAf","sourcesContent":["import React, {Component} from 'react';\n\n\nclass Search {\n    constructor(grid,col,row) {\n        this.grid=grid;\n        this.col=col;\n        this.row=row;\n    }\n    breadth_first_search(){\n    let row=8;\n    let col=0;\n    let queue=[];\n    queue.push(this.grid[col][row])\n        let current_node=queue.shift();\n    console.log(current_node)\n        let neighbors=current_node.searchNeighbors();\n    console.log(neighbors)\n        for(let i=0;i<neighbors.length;i++){\n            if(current_node.isFinish){\n                alert(\"Found\")\n                return\n            }\n            queue.push(neighbors[i])\n\n        }\n    }\n}\n\nexport default Search;"]},"metadata":{},"sourceType":"module"}