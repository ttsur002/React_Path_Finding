{"ast":null,"code":"import React, { Component } from 'react';\n\nclass Search {\n  constructor(grid, col, row) {\n    this.grid = grid;\n    this.col = col;\n    this.row = row;\n  }\n\n  breadth_first_search() {\n    let row = 8;\n    let col = 0;\n    let queue = [];\n    queue.push(this.grid[col][row]);\n\n    while (queue.length !== 0) {\n      let current_node = queue.shift();\n      let neighbors = current_node.searchNeighbors();\n\n      if (neighbors.length === 0) {\n        continue;\n      }\n\n      for (let i = 0; i < neighbors.length; i++) {\n        if (current_node.isFinish) {\n          alert(\"Found\");\n          return;\n        }\n\n        queue.push(neighbors[i]);\n      }\n    }\n  }\n\n}\n\nexport default Search;","map":{"version":3,"sources":["/Users/takehirotsurumi/WebstormProjects/streamlit/src/Search.js"],"names":["React","Component","Search","constructor","grid","col","row","breadth_first_search","queue","push","length","current_node","shift","neighbors","searchNeighbors","i","isFinish","alert"],"mappings":"AAAA,OAAOA,KAAP,IAAeC,SAAf,QAA+B,OAA/B;;AAGA,MAAMC,MAAN,CAAa;AACTC,EAAAA,WAAW,CAACC,IAAD,EAAMC,GAAN,EAAUC,GAAV,EAAe;AACtB,SAAKF,IAAL,GAAUA,IAAV;AACA,SAAKC,GAAL,GAASA,GAAT;AACA,SAAKC,GAAL,GAASA,GAAT;AACH;;AACDC,EAAAA,oBAAoB,GAAE;AACtB,QAAID,GAAG,GAAC,CAAR;AACA,QAAID,GAAG,GAAC,CAAR;AACA,QAAIG,KAAK,GAAC,EAAV;AACAA,IAAAA,KAAK,CAACC,IAAN,CAAW,KAAKL,IAAL,CAAUC,GAAV,EAAeC,GAAf,CAAX;;AACA,WAAME,KAAK,CAACE,MAAN,KAAe,CAArB,EAAwB;AACpB,UAAIC,YAAY,GAACH,KAAK,CAACI,KAAN,EAAjB;AACA,UAAIC,SAAS,GAACF,YAAY,CAACG,eAAb,EAAd;;AACA,UAAGD,SAAS,CAACH,MAAV,KAAmB,CAAtB,EAAwB;AACpB;AACH;;AACD,WAAI,IAAIK,CAAC,GAAC,CAAV,EAAYA,CAAC,GAACF,SAAS,CAACH,MAAxB,EAA+BK,CAAC,EAAhC,EAAmC;AAC/B,YAAGJ,YAAY,CAACK,QAAhB,EAAyB;AACrBC,UAAAA,KAAK,CAAC,OAAD,CAAL;AACA;AACH;;AACDT,QAAAA,KAAK,CAACC,IAAN,CAAWI,SAAS,CAACE,CAAD,CAApB;AACH;AACA;AACJ;;AAzBQ;;AA4Bb,eAAeb,MAAf","sourcesContent":["import React, {Component} from 'react';\n\n\nclass Search {\n    constructor(grid,col,row) {\n        this.grid=grid;\n        this.col=col;\n        this.row=row;\n    }\n    breadth_first_search(){\n    let row=8;\n    let col=0;\n    let queue=[];\n    queue.push(this.grid[col][row])\n    while(queue.length!==0) {\n        let current_node=queue.shift();\n        let neighbors=current_node.searchNeighbors();\n        if(neighbors.length===0){\n            continue;\n        }\n        for(let i=0;i<neighbors.length;i++){\n            if(current_node.isFinish){\n                alert(\"Found\")\n                return\n            }\n            queue.push(neighbors[i])\n        }\n        }\n    }\n}\n\nexport default Search;"]},"metadata":{},"sourceType":"module"}