{"ast":null,"code":"import React, { Component } from 'react';\n\nclass Search {\n  constructor(grid, col, row) {\n    this.grid = grid;\n    this.col = col;\n    this.row = row;\n  }\n\n  breadth_first_search() {\n    let row = 8;\n    let col = 0;\n    let queue = [];\n    let Visited = [];\n    let i = 0;\n    queue.push(this.grid[col][row]);\n\n    while (0 !== queue.length) {\n      for (i; i < queue.length; i++) {\n        let neighbors = queue[i].searchNeighbors();\n\n        if (neighbors[0].isFinish) {\n          alert(\"found\");\n\n          for (let i = 0; i < this.col; i++) {\n            for (let j = 0; j < this.row; j++) {\n              this.grid[i][j].isVisited = false;\n            }\n          }\n\n          console.log(Visited);\n          return;\n        }\n\n        for (let j = 0; j < neighbors.length; j++) {\n          queue.push(neighbors[j]);\n        }\n      }\n\n      for (let k = 0; k < i + 1; k++) {\n        queue[k].isVisited = true;\n        let current_node = queue[k].col + \" \" + queue[k].row;\n        Visited.push(current_node);\n        document.getElementsByName(current_node)[0].setAttribute(\"isVisited\", true);\n        console.log(queue.shift());\n      }\n    }\n  }\n\n}\n\nexport default Search;","map":{"version":3,"sources":["/Users/takehirotsurumi/WebstormProjects/streamlit/src/Search.js"],"names":["React","Component","Search","constructor","grid","col","row","breadth_first_search","queue","Visited","i","push","length","neighbors","searchNeighbors","isFinish","alert","j","isVisited","console","log","k","current_node","document","getElementsByName","setAttribute","shift"],"mappings":"AAAA,OAAOA,KAAP,IAAeC,SAAf,QAA+B,OAA/B;;AAGA,MAAMC,MAAN,CAAa;AACTC,EAAAA,WAAW,CAACC,IAAD,EAAMC,GAAN,EAAUC,GAAV,EAAe;AACtB,SAAKF,IAAL,GAAUA,IAAV;AACA,SAAKC,GAAL,GAASA,GAAT;AACA,SAAKC,GAAL,GAASA,GAAT;AACH;;AACDC,EAAAA,oBAAoB,GAAE;AACtB,QAAID,GAAG,GAAC,CAAR;AACA,QAAID,GAAG,GAAC,CAAR;AACA,QAAIG,KAAK,GAAC,EAAV;AACA,QAAIC,OAAO,GAAC,EAAZ;AACA,QAAIC,CAAC,GAAC,CAAN;AACAF,IAAAA,KAAK,CAACG,IAAN,CAAW,KAAKP,IAAL,CAAUC,GAAV,EAAeC,GAAf,CAAX;;AACA,WAAM,MAAME,KAAK,CAACI,MAAlB,EAA0B;AACtB,WAAIF,CAAJ,EAAMA,CAAC,GAACF,KAAK,CAACI,MAAd,EAAqBF,CAAC,EAAtB,EAA0B;AACtB,YAAIG,SAAS,GAAGL,KAAK,CAACE,CAAD,CAAL,CAASI,eAAT,EAAhB;;AACA,YAAID,SAAS,CAAC,CAAD,CAAT,CAAaE,QAAjB,EAA2B;AACvBC,UAAAA,KAAK,CAAC,OAAD,CAAL;;AACA,eAAK,IAAIN,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG,KAAKL,GAAzB,EAA8BK,CAAC,EAA/B,EAAmC;AAC/B,iBAAK,IAAIO,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG,KAAKX,GAAzB,EAA8BW,CAAC,EAA/B,EAAmC;AAC/B,mBAAKb,IAAL,CAAUM,CAAV,EAAaO,CAAb,EAAgBC,SAAhB,GAA4B,KAA5B;AACH;AACJ;;AACDC,UAAAA,OAAO,CAACC,GAAR,CAAYX,OAAZ;AACA;AACH;;AACD,aAAK,IAAIQ,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGJ,SAAS,CAACD,MAA9B,EAAsCK,CAAC,EAAvC,EAA2C;AACvCT,UAAAA,KAAK,CAACG,IAAN,CAAWE,SAAS,CAACI,CAAD,CAApB;AACH;AACJ;;AACD,WAAI,IAAII,CAAC,GAAC,CAAV,EAAYA,CAAC,GAACX,CAAC,GAAC,CAAhB,EAAkBW,CAAC,EAAnB,EAAuB;AACnBb,QAAAA,KAAK,CAACa,CAAD,CAAL,CAASH,SAAT,GAAqB,IAArB;AACA,YAAII,YAAY,GAAGd,KAAK,CAACa,CAAD,CAAL,CAAShB,GAAT,GAAe,GAAf,GAAqBG,KAAK,CAACa,CAAD,CAAL,CAASf,GAAjD;AACAG,QAAAA,OAAO,CAACE,IAAR,CAAaW,YAAb;AACAC,QAAAA,QAAQ,CAACC,iBAAT,CAA2BF,YAA3B,EAAyC,CAAzC,EAA4CG,YAA5C,CAAyD,WAAzD,EAAsE,IAAtE;AACAN,QAAAA,OAAO,CAACC,GAAR,CAAYZ,KAAK,CAACkB,KAAN,EAAZ;AAEH;AACA;AACJ;;AAvCQ;;AA0Cb,eAAexB,MAAf","sourcesContent":["import React, {Component} from 'react';\n\n\nclass Search {\n    constructor(grid,col,row) {\n        this.grid=grid;\n        this.col=col;\n        this.row=row;\n    }\n    breadth_first_search(){\n    let row=8;\n    let col=0;\n    let queue=[];\n    let Visited=[];\n    let i=0\n    queue.push(this.grid[col][row])\n    while(0 !== queue.length) {\n        for(i;i<queue.length;i++) {\n            let neighbors = queue[i].searchNeighbors()\n            if (neighbors[0].isFinish) {\n                alert(\"found\")\n                for (let i = 0; i < this.col; i++) {\n                    for (let j = 0; j < this.row; j++) {\n                        this.grid[i][j].isVisited = false\n                    }\n                }\n                console.log(Visited)\n                return\n            }\n            for (let j = 0; j < neighbors.length; j++) {\n                queue.push(neighbors[j])\n            }\n        }\n        for(let k=0;k<i+1;k++) {\n            queue[k].isVisited = true\n            let current_node = queue[k].col + \" \" + queue[k].row\n            Visited.push(current_node)\n            document.getElementsByName(current_node)[0].setAttribute(\"isVisited\", true)\n            console.log(queue.shift())\n\n        }\n        }\n    }\n}\n\nexport default Search;"]},"metadata":{},"sourceType":"module"}